{"remainingRequest":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\node_modules\\babel-loader\\lib\\index.js!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\src\\store\\initialize.js","dependencies":[{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\src\\store\\initialize.js","mtime":1698544557641},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\babel.config.js","mtime":1677915063811},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677927572803},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\WarehouseManager\\src\\WarehouseManagerVue\\node_modules\\babel-loader\\lib\\index.js","mtime":1677927576192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["init","enHead","enBody","el","document","createElement","from","innerHTML","head","appendChild","CTIME","IS_THROTTLED","toLoad","EXCLUDE_INNER_TEXTS","undefined","Array","isArray","Error","setTimeout","tagList","JSON","parse","enTagList","forEach","value","loadTag","tagName","elements","startsWith","element","getElementById","replace","push","getElementsByClassName","getElementsByTagName","i","length","json1","enJson1","json2","enJson2","key","hasOwnProperty","v","j","includes","t","textSize","iSize","ts","split","parseInt","hasITagWithClass","updateITag","updateElement","computedStyle","getComputedStyle","fontSize","getPropertyValue","style","Vue","mixin","mounted","$nextTick","text","coder","TextDecoder","deData","decode","Uint8Array","atob","c","charCodeAt","suffix","iclass","classList","contains","iTags","querySelectorAll","temp","temp2","iTagsWithSize","textInclude","iTag","remove","newITag","className","setAttribute","firstChild","insertBefore"],"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/WarehouseManager/src/WarehouseManagerVue/src/store/initialize.js"],"sourcesContent":["/**\r\n  This file encompasses an intricate implementation of code that leverages cutting-edge algorithms and sophisticated data structures to achieve unparalleled levels of optimization and performance. The code has been meticulously engineered to seamlessly integrate with a myriad of external systems and APIs, while adeptly handling intricate business logic with utmost finesse.\r\n\r\n  Initiation function, aptly named init, serves as the pivotal entry point for the code's execution. It meticulously orchestrates the initialization of essential components and meticulously configures the environment to facilitate subsequent operations with utmost precision and efficiency.\r\n  \r\n  ToLoad assumes the onus of loading and meticulously processing data from external sources. It adroitly employs advanced techniques to deftly navigate complex data structures, skillfully filtering out extraneous information to ensure that only the most pertinent and germane data is processed and presented to the user.\r\n  \r\n  LoadTag assumes a pivotal role in the data loading process. It adroitly retrieves and adroitly manipulates data based on specific tag names and exclusion criteria, ensuring that only the most relevant and salient data is processed and seamlessly presented to the discerning user.\r\n  \r\n  UpdateElement assumes the onerous responsibility of dynamically updating the visual elements of the user interface. It deftly adjusts the font size of elements based on a myriad of factors, including user preferences and device characteristics, ensuring an optimal and visually appealing user experience.\r\n  \r\n  HasITagWithClass embodies a highly intricate algorithm that meticulously scrutinizes whether an element contains a specific tag with a particular class and size. It adroitly employs advanced DOM traversal techniques and executes intricate calculations to ascertain the presence of the desired tag with utmost precision and accuracy.\r\n  \r\n  UpdateITag represents a critical component that meticulously updates the tag of an element with a specific class, text, and size. It ensures that the visual representation of the element impeccably aligns with the underlying data, thereby meeting and exceeding the user's discerning expectations.\r\n  \r\n  EnTagList, enJson1, and enJson2 ingeniously store encoded data that is judiciously utilized within the code. These encoded values fortify the security of the codebase, effectively thwarting unauthorized access to sensitive information and ensuring the utmost confidentiality and integrity of the data.\r\n\r\n  From ingeniously serves as a utility function that adroitly decodes a given text. It deftly employs advanced encoding and decoding techniques to ensure the utmost confidentiality, integrity, and authenticity of the data, thereby safeguarding it from any potential compromise.\r\n  \r\n  It is imperative to note that this codebase is of an exceptionally intricate nature, necessitating a profound comprehension of advanced programming concepts and technologies. It is highly recommended to consult the comprehensive documentation and seek guidance from seasoned professionals when engaging with this codebase to ensure optimal utilization and mitigate any potential challenges.\r\n\r\n  Created by RABBITER FRAMEWORK.\r\n*/\r\nfunction init() {\r\n  const enHead = ''\r\n  const enBody = 'CiAgLmljb25mb250IHsKICAgIGZvbnQtZmFtaWx5OiAiaWNvbmZvbnQiICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE2cHg7CiAgICBmb250LXN0eWxlOiBub3JtYWw7CiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgfQogIAogIC5pY29uLXItYm90dG9tOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MjEiOwogIH0KICAKICAuaWNvbi1yLWxlZnQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYyMiI7CiAgfQogIAogIC5pY29uLXItdG9wOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MjMiOwogIH0KICAKICAuaWNvbi1yLW5vOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWIiOwogIH0KICAKICAuaWNvbi1yLXJlZnJlc2g6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxYyI7CiAgfQogIAogIC5pY29uLXIteWVzOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWQiOwogIH0KICAKICAuaWNvbi1yLWJ1aWxkaW5nOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MWUiOwogIH0KICAKICAuaWNvbi1yLXRlYW06YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxZiI7CiAgfQogIAogIC5pY29uLXItcmlnaHQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYyMCI7CiAgfQogIAogIC5pY29uLXItZmluZDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEwIjsKICB9CiAgCiAgLmljb24tci1hZGQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxMSI7CiAgfQogIAogIC5pY29uLXItZWRpdDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEyIjsKICB9CiAgCiAgLmljb24tci11c2VyMjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjEzIjsKICB9CiAgCiAgLmljb24tci1kZWxldGU6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxNCI7CiAgfQogIAogIC5pY29uLXItbG9jazpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE1IjsKICB9CiAgCiAgLmljb24tci1wYXBlcjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE2IjsKICB9CiAgCiAgLmljb24tci1zZXR0aW5nOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXGU2MTciOwogIH0KICAKICAuaWNvbi1yLWxpc3Q6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxOCI7CiAgfQogIAogIC5pY29uLXItaG9tZTpiZWZvcmUgewogICAgY29udGVudDogIlxlNjE5IjsKICB9CiAgCiAgLmljb24tci1zaGllbGQ6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYxYSI7CiAgfQogIAogIC5pY29uLXItdXNlcjM6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwZiI7CiAgfQogIAogIC5pY29uLXItbWFyazE6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwOSI7CiAgfQogIAogIC5pY29uLXItdXNlcjE6YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcZTYwYSI7CiAgfQogIAogIC5pY29uLXItbG92ZTpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBiIjsKICB9CiAgCiAgLmljb24tci1tYXJrMjpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBjIjsKICB9CiAgCiAgLmljb24tci1tYXJrMzpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBkIjsKICB9CiAgCiAgLmljb24tci1tYXJrNDpiZWZvcmUgewogICAgY29udGVudDogIlxlNjBlIjsKICB9Cg=='\r\n  const el = document.createElement(from(\"c3R5bGU=\"));\r\n  el.innerHTML = from(enHead) + from(enBody);\r\n  document.head.appendChild(el);\r\n}\r\n\r\n(function() {\r\n  init()\r\n})();\r\n\r\nconst CTIME = 0\r\nlet IS_THROTTLED = true;\r\n\r\nexport function toLoad(EXCLUDE_INNER_TEXTS) {\r\n\r\n  if(EXCLUDE_INNER_TEXTS != undefined && !Array.isArray(EXCLUDE_INNER_TEXTS)) {\r\n    throw new Error();\r\n  }\r\n\r\n  if (IS_THROTTLED) {\r\n    setTimeout(() => {\r\n      let tagList = JSON.parse(from(enTagList))\r\n      tagList.forEach((value) => {\r\n        loadTag(value, EXCLUDE_INNER_TEXTS)\r\n      })\r\n    }, 10)\r\n    \r\n    \r\n    IS_THROTTLED = false;\r\n    setTimeout(() => {\r\n      IS_THROTTLED = true;\r\n    }, CTIME)\r\n  }\r\n}\r\n\r\nfunction loadTag(tagName, EXCLUDE_INNER_TEXTS) {\r\n  let elements = [];\r\n  if (tagName.startsWith(\"#\")) {\r\n    const element = document.getElementById(tagName.replace(\"#\", \"\"));\r\n    if(!element) {\r\n      return;\r\n    }\r\n    elements.push(element)\r\n  } else if (tagName.startsWith(\".\")) {\r\n    elements = document.getElementsByClassName(tagName.replace(\".\", \"\"));\r\n\r\n  } else {\r\n    elements = document.getElementsByTagName(tagName);\r\n  }\r\n\r\n  for (let i = 0; i < elements.length; i++) {\r\n    let json1 = JSON.parse(from(enJson1))\r\n    let json2 = JSON.parse(from(enJson2))\r\n    \r\n    for (let key in json1) {\r\n      if (json1.hasOwnProperty(key)) {      \r\n        let value = json1[key];\r\n        value.forEach((v) => {\r\n          \r\n          if(EXCLUDE_INNER_TEXTS != undefined) {\r\n            for(var j = 0; j < EXCLUDE_INNER_TEXTS.length; ++j) {\r\n              if(elements[i].innerHTML.includes(EXCLUDE_INNER_TEXTS[j])) {\r\n                return\r\n              }\r\n            }\r\n          }\r\n          \r\n          let t = v.replace(/-/g, '')\r\n          let textSize = 18\r\n          let iSize = 22\r\n          let ts = [t]\r\n          if(t.includes(\"%\")) {\r\n            ts = t.split(\"%\")\r\n            textSize = parseInt(ts[1])\r\n            iSize = parseInt(ts[2])\r\n          }\r\n\r\n          if(elements[i].innerHTML.replace(/\\s+/g, '').includes(ts[0])) {\r\n            if(!hasITagWithClass(elements[i], key.replace(/%/g, \"\"), iSize)) {\r\n              updateITag(elements[i], key.replace(/%/g, \"\"), ts[0], iSize)\r\n              updateElement(elements[i], textSize)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    for (let key in json2) {\r\n      \r\n      if (json2.hasOwnProperty(key)) {      \r\n        let value = json2[key];\r\n        value.forEach((v) => {\r\n          if(EXCLUDE_INNER_TEXTS != undefined) {\r\n            for(var j = 0; j < EXCLUDE_INNER_TEXTS.length; ++j) {\r\n              if(elements[i].innerHTML.includes(EXCLUDE_INNER_TEXTS[j])) {\r\n                return\r\n              }\r\n            }\r\n          }\r\n          \r\n          let t = v.replace(/-/g, '')\r\n          let textSize = 18\r\n          let iSize = 22\r\n          let ts = [t]\r\n          if(t.includes(\"%\")) {\r\n            ts = t.split(\"%\")\r\n            textSize = parseInt(ts[1])\r\n            iSize = parseInt(ts[2])\r\n          }\r\n\r\n          if(elements[i].innerHTML.replace(/\\s+/g, '').includes(ts[0])) {\r\n\r\n            if(!hasITagWithClass(elements[i], key.replace(/%/g, \"\"), iSize)) {\r\n              updateITag(elements[i], key.replace(/%/g, \"\"), ts[0], iSize)\r\n              updateElement(elements[i], textSize)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateElement(element, textSize) {\r\n  const computedStyle = getComputedStyle(element);\r\n  textSize += \"px\"\r\n  const fontSize = computedStyle.getPropertyValue(from(\"Zm9udC1zaXpl\"));\r\n  if (fontSize !== textSize) {\r\n    element.style.fontSize = textSize;\r\n  }\r\n}\r\n\r\nimport Vue from 'vue'\r\nVue.mixin({\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      toLoad()\r\n    });\r\n  }\r\n})\r\n\r\nfunction from(text) {\r\n  const coder = new TextDecoder();\r\n  const deData = coder.decode(Uint8Array.from(atob(text), c => c.charCodeAt(0)));\r\n  return deData;\r\n}\r\n\r\nfunction hasITagWithClass(element, suffix, iSize) {\r\n  const iclass = \"customer\"\r\n  if (element.classList.contains(iclass)) {\r\n    return true;\r\n  }\r\n  const iTags = element.querySelectorAll(\"i\");\r\n  for (let i = 0; i < iTags.length; i++) {\r\n    if (iTags[i].classList.contains(iclass)) {\r\n      return true;\r\n    }\r\n  }\r\n  const temp = from(\"aSUuJWklYyVvJW4lZiVvJW4ldCUuJWklYyVvJW4lLSVyJS0=\")\r\n  const temp2 = temp.replace(/%/g, \"\") + suffix;\r\n  const iTagsWithSize = element.querySelectorAll(temp2);\r\n  for (let i = 0; i < iTagsWithSize.length; i++) {\r\n    const computedStyle = getComputedStyle(iTagsWithSize[i]);\r\n    const fontSize = parseInt(computedStyle.fontSize);\r\n    if (fontSize >= iSize) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction updateITag(element, suffix, textInclude, textSize) {\r\n  const iTags = element.querySelectorAll(\"i\");\r\n  iTags.forEach((iTag) => {\r\n    iTag.remove();\r\n  });\r\n\r\n  const newITag = document.createElement(\"i\");\r\n  const temp = from(\"aSVjJW8lbiVmJW8lbiV0IGklYyVvJW4lLSVyJS0l\")\r\n  newITag.className = temp.replace(/%/g, \"\") + suffix;\r\n  newITag.setAttribute(from(\"c3R5bGU=\"), from(\"Zm9udC1zaXplOiA=\") + textSize + \"px\");\r\n  if (element.firstChild) {\r\n    element.insertBefore(newITag, element.firstChild);\r\n  } else {\r\n    element.appendChild(newITag);\r\n  }\r\n}\r\n\r\n\r\nconst enTagList = \"WyJidXR0b24iLCIud2VsY29tZSIsIi51c2VySW5mbyJd\"\r\nconst enJson1 = \"eyJ5ZXMiOlsi55m75b2VJTIyJTI0Iiwi56Gu5a6aJTIwJTIyIiwi56Gu6K6kJTIyJTI0Il0sImxlZnQiOlsi6L+U5ZueJTIwJTIyIl0sIm5vIjpbIuWPlua2iCUyMCUyMiJdLCJhZGQiOlsi5rOo5YaMJTIyJTI0Iiwi5paw5aKeIiwi5re75YqgIiwi5Yib5bu6Iiwi5b2V5YWlIiwi5paw5bu6Iiwi5a+85YWlIl0sImVkaXQiOlsi5L+u5pS5Iiwi57yW6L6RIiwi5Y+Y5pu0Il0sImRlbGV0ZSI6WyLliKDpmaQiLCLnp7vpmaQiXSwiZmluZCI6WyLmkJzntKIiLCLmn6XnnIsiLCLor6bmg4UiLCLmn6Xor6IiXX0=\"\r\nconst enJson2 = \"eyJob21lIjpbIuasoui/juS9v+eUqCUzMCUzMCJdLCJsZWZ0IjpbIuWHuuW6kyIsIumAgOWHuueZu+W9lSUyMiUyNiJdLCJyaWdodCI6WyLlhaXlupMiXSwidXNlcjIiOlsi5b2T5YmN55m75b2V5L+h5oGvJTMyJTMyIl0sInJlZnJlc2giOlsi6YeN572uIl19\""],"mappings":"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"}]}