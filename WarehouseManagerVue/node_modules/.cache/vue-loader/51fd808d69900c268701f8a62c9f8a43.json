{"remainingRequest":"D:\\WarehouseManagerVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WarehouseManagerVue\\src\\components\\assistant\\Assistant.vue?vue&type=style&index=0&id=367c9c6d&lang=css&","dependencies":[{"path":"D:\\WarehouseManagerVue\\src\\components\\assistant\\Assistant.vue","mtime":1720169766303},{"path":"D:\\WarehouseManagerVue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1677927573745},{"path":"D:\\WarehouseManagerVue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1677927577942},{"path":"D:\\WarehouseManagerVue\\node_modules\\postcss-loader\\src\\index.js","mtime":1677927575422},{"path":"D:\\WarehouseManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677927572803},{"path":"D:\\WarehouseManagerVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1677927577316}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQojYXBwIHsNCiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsNCiAgdGV4dC1hbGlnbjogY2VudGVyOw0KICBjb2xvcjogIzJjM2U1MDsNCiAgbWFyZ2luLXRvcDogNjBweDsNCn0NCmJ1dHRvbiB7DQogIGZvbnQtc2l6ZTogMjBweDsNCiAgcGFkZGluZzogMTBweDsNCn0NCg=="},{"version":3,"sources":["Assistant.vue"],"names":[],"mappings":";AAgFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Assistant.vue","sourceRoot":"src/components/assistant","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <button @click=\"toggleRecording\">{{ isRecording ? '停止对话' : '开始对话' }}</button>\r\n    <p v-if=\"transcript\">{{ transcript }}</p>\r\n    <p v-if=\"response\">{{ response }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      isRecording: false,\r\n      transcript: '',\r\n      response: '',\r\n      recognition: null,\r\n      audio: new Audio()\r\n    };\r\n  },\r\n  methods: {\r\n    toggleRecording() {\r\n      if (this.isRecording) {\r\n        this.stopRecording();\r\n      } else {\r\n        this.startRecording();\r\n      }\r\n    },\r\n    startRecording() {\r\n      this.isRecording = true;\r\n      this.recognition.start();\r\n    },\r\n    stopRecording() {\r\n      this.isRecording = false;\r\n      this.recognition.stop();\r\n    },\r\n    sendToBackend(transcript) {\r\n      fetch('http://localhost:5000/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ message: transcript })\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.response = data.response;\r\n          this.playAudio(data.audioUrl);\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    },\r\n    playAudio(audioUrl) {\r\n      this.audio.src = audioUrl;\r\n      this.audio.play();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n    this.recognition.lang = 'zh-CN';\r\n    this.recognition.interimResults = false;\r\n    this.recognition.maxAlternatives = 1;\r\n    \r\n    this.recognition.onresult = (event) => {\r\n      this.transcript = event.results[0][0].transcript;\r\n      this.sendToBackend(this.transcript);\r\n    };\r\n\r\n    this.recognition.onerror = (event) => {\r\n      console.error('Speech recognition error', event.error);\r\n    };\r\n\r\n    this.recognition.onend = () => {\r\n      if (this.isRecording) {\r\n        this.recognition.start();  // 继续对话\r\n      }\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-top: 60px;\r\n}\r\nbutton {\r\n  font-size: 20px;\r\n  padding: 10px;\r\n}\r\n</style>\r\n"]}]}